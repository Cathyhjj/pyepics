2010-09-17  Matt Newville  <newville@cars.uchicago.edu>

	* Version 3.0.8:
	- fixed fetching of ctrl and time variants of array data, due
	to ptch from Glen Wright (<Glen.Wright@lightsource.ca>)

	- many small improvements for connections on slow networks (say,
	over a VPN)

	- many fixes to wx.MotorPanel and related GUI components, so 
	that scripts/wx_motor.py now works.

	- small improvements to motor device.

	- doc improvements

2010-08-31  Matt Newville  <newville@cars.uchicago.edu>

	* Version 3.0.7:
	- improved connection speed when connecting to many PVs
	(especially if some are not connected)

	- improved reliability of get(as_string=True) actually returning
	the "proper" string value of the PV (enum name, doubles formatted
	according to precision field, etc).

	- added CA Severity Exception, which is then ignored pend_io, so
	as to avoid unnecessary crashes.

	- added several tests.
	
	- documentation improvements
	
2010-06-10  Matt Newville  <newville@cars.uchicago.edu>

	* Version 3.0.6:
	- added working connection callbacks for PVs: users supply 
	a function that is called on changes to connection status.

2010-05-25  Matt Newville  <newville@cars.uchicago.edu>

	* Version 3.0.5:
	- set EPICS_CA_MAX_ARRAY_BYTES to 2**31 prior to loading the
  	libca DLL, if EPICS_CA_MAX_ARRAY_BYTES is not already set.

	- use ca.AUTOMONITOR_MAXLENGTH (default = 16384) to improve
	performance for large array / waveform data, in two ways:
	   1. a PV with an element count > ca.AUTOMONITOR_MAXLENGTH will
	NOT be automatically monitored, so that explicit get() calls are
	needed.  To override this,  use  auto_monitor=True when creating
	the PV.  Smaller arrays will still be automatically monitored
	(which can be turned off with auto_monitor=False).  This does not
	have a direct impact on the ca interface.

	  2.  PVs and ca channels with element count >
	ca.AUTOMONITOR_MAXLENGTH will NOT be implicitly converted to numpy
	arrays unless explicitly asked for with get(..., as_numpy=True).

	- fixed PV's char_value field in info paragraph, especially for
	"fresh" PVs where the precision value may not have been correctly
	fetched when info is called.

2010-05-18  Matt Newville  <newville@cars.uchicago.edu>

	* Version 3.0.4:
	fixed some performance bottlenecks for large arrays, as from
	areaDetector.
	
2010-05-02  Matt Newville  <newville@cars.uchicago.edu>

	* Version 3.0.3:
	fixed some threading issues

2010-04-20  Matt Newville  <newville@cars.uchicago.edu>

	* Version 3.0.2:

	- improved method to "locate CA dll" (or .so or .dylib) at run
	time, using ctypes.util.find_lib().  On Unix (including linux, Mac
	OSX), if the "usual system approach" of finding a DLL is not
	successful, the enviroment variables PATH and LD_LIBRARY_PATH (and
	DYLD_LIBRARY_PATH on Mac OSX) will be searched for the appropriate
	DLL.
		
	- improved functionality for Python Threads.   The _cache data in
	ca.py now stores Channel IDs with CA "context", so that use of
	Python threads (as from threading.Thread) work, allowing, gets(),
	puts(), and callbacks in separately running threads.
			

2010-04-08  Matt Newville  <newville@cars.uchicago.edu>

	* Version 3.0.1:
	inital release of version 3.0.1 

	This is a dramatic change from the 2.1 series.  Please consult
	documentation.
	
	
